#!/usr/bin/env python
# vim: set fileencoding=utf-8 :

from __future__ import (unicode_literals, absolute_import,
                        division, print_function)

from .dnslib import DNSRecord, DNSQuestion, QTYPE

import struct
import random

class ARecordQuery(object):

    def __init__(self, domain, **kwargs):
        self.h = dict()
        self.h['id'] = random.randint(0,65535)
        self.h['qr'] = 0
        self.h['opcode'] = 0
        self.h['aa'] = 0
        self.h['tc'] = 0
        self.h['rd'] = 1
        self.h['ra'] = 0
        self.h['z'] = 0
        self.h['rcode'] = 0
        self.h['qdcount'] = 1
        self.h['ancount'] = 0
        self.h['nscount'] = 0
        self.h['arcount'] = 0
        self.h.update(kwargs)

        self.q = dict()
        self.q['qname'] = domain
        self.q['qtype'] = 1
        self.q['qclass'] = 1
        self.q.update(kwargs)

    def pack(self):
        ret = b''
        ret += struct.pack('!H', self.h['id'])
        ret += struct.pack(
            '!H',
            self.h['qr']<<15 + self.h['opcode']<<11 + self.h['aa']<<10
            +self.h['tc']<<9 + self.h['rd']<<8 + self.h['ra']<<7 +
            self.h['z']<<4 + self.h['rcode']
        )

        for f in ('qdcount', 'ancount', 'nscount', 'arcount'):
            ret += struct.pack(
                '!H', self.h[f]
            )

        domain = self.q['qname']
        qname = b''
        for l in self.q['qname'].split('.'):
            qname += struct.pack('!Hs', len(l), l.encode('utf-8'))
        qname += struct.pack('!H', 0)
        ret += qname

        ret += struct.pack('!H', self.q['qtype'])
        ret += struct.pack('!H', self.q['qclass'])
        return ret

class DNSAnswer(object):

    def __init__(self, data):
        d = DNSRecord.parse(data)
        self.answer = d

    def parse(self):
        print(self.answer)
